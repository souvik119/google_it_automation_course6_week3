#!/usr/bin/env python3

import json
import locale
import sys
import os
import operator
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0, "model": ""}
  car_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item['total_sales'] > max_sales['sales']:
        max_sales['sales'] = item['total_sales']
        max_sales['model'] = item['car']['car_model'] 
    # TODO: also handle most popular car_year
    year = item['car']['car_year']
    if year not in car_year:
        car_year[year] = item['total_sales'] 
    else:
        car_year[year] += item['total_sales']
  sorted_car_year = sorted(car_year.items(), key=operator.itemgetter(1), reverse=True)
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(max_sales['model'],
      max_sales['sales']),
    "The most popular year was {} with {} sales.".format(
      sorted_car_year[0][0], sorted_car_year[0][1])
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)
  print(table_data)
  path = '/tmp/cars.pdf'
  additional_info = "<br/>".join(summary)
  title = 'Sales summary for last month'
  reports.generate(path, title, additional_info, table_data)
  # TODO: send the PDF report as an email attachment
  from_text = 'automation@example.com'
  to_text = '{}@example.com'.format(os.environ.get('USER'))
  subject_text = 'Sales summary for last month'
  body_text = "\n".join(summary)
  message = emails.generate(from_text, to_text, subject_text, body_text, path)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

